interview_preparation_notes
=========================================
wait and notify and notifyAll()



// Online Java Compiler
// Use this editor to write, compile and run your Java code online

class Mythread extends Thread {
    int sum=0;
    void run(){
        for(int i=0;i<=10;i++){
            sum=sum+i;
        }
    }
}
    Class Main{
    
    public static void main(String[] args) {
        
        Mythread mt=new Mythread();
        mt.start();
        
        System.out.println(mt.sumit);
    }
}
what it is going to happened here :-- > it will print the 0 value .

main thread will not wait till run method complete all the things. it will give the out sout.t0 thread will take some time so it will automatically print the sout value .

to make wait of main thread ,We need to use the synchronized block  we can see below 




// Online Java Compiler
// Use this editor to write, compile and run your Java code online

class Mythread extends Thread {
    int sum=0;
    void run(){
        synchronized(this){
        for(int i=0;i<=10;i++){
            sum=sum+i;
        }
        //after completion of this ,we need to call the notify() method to invoke the main thread .
        this.notify() ;
        }
    }
}
    Class Main{
    
    public static void main(String[] args) {
        
        Mythread mt=new Mythread();
     
        mt.start();
      
       synchronized(mt){
       mt.wait() //this method pause the execution of main thread and will release the object to mt and it give the log to mt 
           
       }

        System.out.println(mt.sum);
    }
}

in this case it will give the summation of all the numbers as output.

 

================================================================================================
thread.join() :- > join method of thread class waits for a  thread to die. It is used when want one thread to wait to complete another.
 
===============================================================================================





thread interview questions :- ================>

=======================================================

18)Can we make the user thread as daemon thread if the thread is started?
No, if you do so, it will throw IllegalThreadStateException. Therefore, we can only create a daemon thread before starting the thread.



class Mythread extends Thread{

void run(){

sout("this is nothing but deamon thread");
}


public static void main(String args[]){

Mythread t1=new Mythread();
     t1.start();
//make deamon thread we need to use the mthod called   setDeamon(true)

setDeamon(true);//it will give exception because it is started and we cna not make deamon when started the thread.




}
======================================================

20)When should we interrupt a thread?
We should interrupt a thread when we want to break out the sleep or wait state of a thread. 


=========================================
21) What is the synchronization?
Synchronization is the capability to control the access of multiple threads to any shared resource


==================================================

25)What is the difference between notify() and notifyAll()?
The notify() is used to unblock one waiting thread whereas notifyAll() method is used to unblock all the threads in waiting state

====================================================

26)What is the deadlock?
Deadlock is a situation in which every thread is waiting for a resource which is held by some other waiting thread. In this situation, Neither of the thread executes nor it gets the chance to be executed. Instead, there exists a universal waiting state among all the threads. Deadlock is a very complicated situation which can break our code at runtime.


===============================


27) How to detect a deadlock condition? How can it be avoided?
We can detect the deadlock condition by running the code on cmd and collecting the Thread Dump, and if any deadlock is present in the code, then a message will appear on cmd.

Ways to avoid the deadlock condition in Java:

Avoid Nested lock: Nested lock is the common reason for deadlock as deadlock occurs when we provide locks to various threads so we should give one lock to only one thread at some particular time.
Avoid unnecessary locks: we must avoid the locks which are not required.
Using thread join: Thread join helps to wait for a thread until another thread doesn't finish its execution so we can avoid deadlock by maximum use of join method.


==============================================================


28) What is Thread Scheduler in java?
In Java, when we create the threads, they are supervised with the help of a Thread Scheduler, which is the part of JVM. Thread scheduler is only responsible for deciding which thread should be executed. 
===================================================================

29) Does each thread have its stack in multithreaded programming?
Yes, in multithreaded programming every thread maintains its own or separate stack area in memory due to which every thread is independent of each other.



===========================
30) How is the safety of a thread achieved?
If a method or class object can be used by multiple threads at a time without any race condition, then the class is thread-safe. Thread safety is used to make a program safe to use in multithreaded programming. 

It can be achieved by the following ways:

Synchronization
Using Volatile keyword
Using a lock based mechanism
Use of atomic wrapper classes
=============================================================

The volatile keyword in Java is used to indicate that a variable's value will be modified by different threads.

================================================


32) What is the volatile keyword in java?
Volatile keyword is used in multithreaded programming to achieve the thread safety, as a change in one volatile variable is visible to all other threads so one variable can be used by one thread at a time.

===================================================================

What do you understand by thread pool?
Java Thread pool represents a group of worker threads, which are waiting for the task to be allocated.


=======================================

What is the Executor interface in Concurrency API in Java?

The Executor Interface provided by the package java.util.concurrent is the simple interface used to execute the new task. The execute() method of Executor interface is used to execute some given command.

======================================================


36) What is BlockingQueue?
The java.util.concurrent.BlockingQueue is the subinterface of Queue that supports the operations such as waiting for the space availability before inserting a new value or waiting for the queue to become non-empty before retrieving an element from it

===================================================================

Thread.sleep() :-- > method is used to pause the execution of the current thread for specified period of time


========================================================================


38) What is the difference between Java Callable interface and Runnable interface?
The Callable interface and Runnable interface both are used by the classes which wanted to execute with multiple threads. However, there are two main differences between the both :

A Callable <V> interface can return a result, whereas the Runnable interface cannot return any result.
A Callable <V> interface can throw a checked exception, whereas the Runnable interface cannot throw checked exception.


==========================================================

41) Explain the ExecutorService Interface.
The ExecutorService Interface is the subinterface of Executor interface and adds the features to manage the lifecycle.


=============================================================
      
import java.util.concurrent.ExecutorService;  
import java.util.concurrent.Executors;  
import java.util.concurrent.TimeUnit;  
  
public class TestThread {  
   public static void main(final String[] arguments) throws InterruptedException {  
      ExecutorService e = Executors.newSingleThreadExecutor();  
  
      try {  
         e.submit(new Thread());  
         System.out.println("Shutdown executor");  
         e.shutdown();  
         e.awaitTermination(5, TimeUnit.SECONDS);  
      } catch (InterruptedException ex) {  
         System.err.println("tasks interrupted");  
      } finally {  
  
         if (!e.isTerminated()) {  
            System.err.println("cancel non-finished tasks");  
         }  
         e.shutdownNow();  
         System.out.println("shutdown finished");  
      }  
   }  
  
   static class Task implements Runnable {  
        
      public void run() {  
           
         try {  
            Long duration = (long) (Math.random() * 20);  
            System.out.println("Running Task!");  
            TimeUnit.SECONDS.sleep(duration);  
         } catch (InterruptedException ex) {  
            ex.printStackTrace();  
         }  
      }  
   }         
}  
Output

Shutdown executor
shutdown finished

=====================================================

43) What do you understand by Callable and Future in Java?
Java Callable interface: In Java5 callable interface was provided by the package java.util.concurrent. It is similar to the Runnable interface but it can return a result, and it can throw an Exception. It also provides a run() method for execution of a thread. Java Callable can return any object as it uses Generic.


Java Future interface: Java Future interface gives the result of a concurrent process. The Callable interface returns the object of java.util.concurrent.Future.

Java Future provides following methods for implementation.

cancel(boolean mayInterruptIfRunning): It is used to cancel the execution of the assigned task.

get(): It waits for the time if execution not completed and then retrieved the result.

isCancelled(): It returns the Boolean value as it returns true if the task was canceled before the completion.
isDone(): It returns true if the job is completed successfully else returns false.


================================================
44. What is the difference between ScheduledExecutorService and ExecutorService interface?
ExecutorServcie and ScheduledExecutorService both are the interfaces of java.util.Concurrent package but scheduledExecutorService provides some additional methods to execute the Runnable and Callable tasks with the delay or every fixed time period.


==========================================================================================

45) Define FutureTask class in Java?
Java FutureTask class provides a base implementation of the Future interface. The result can only be obtained if the execution of one task is completed, and if the computation is not achieved then get method will be blocked. If the execution is completed, then it cannot be re-started and can't be canceled.

Syntax

public class FutureTask<V> extends Object implements RunnableFuture<V>



=========================================================================










